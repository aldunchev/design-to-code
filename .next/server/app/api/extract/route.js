"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/extract/route";
exports.ids = ["app/api/extract/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fextract%2Froute&page=%2Fapi%2Fextract%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fextract%2Froute.ts&appDir=%2FUsers%2Faldunchev%2FWork%2FProjectsCode%2FAI%2Fdesign-to-code%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Faldunchev%2FWork%2FProjectsCode%2FAI%2Fdesign-to-code&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fextract%2Froute&page=%2Fapi%2Fextract%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fextract%2Froute.ts&appDir=%2FUsers%2Faldunchev%2FWork%2FProjectsCode%2FAI%2Fdesign-to-code%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Faldunchev%2FWork%2FProjectsCode%2FAI%2Fdesign-to-code&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_aldunchev_Work_ProjectsCode_AI_design_to_code_app_api_extract_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/extract/route.ts */ \"(rsc)/./app/api/extract/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/extract/route\",\n        pathname: \"/api/extract\",\n        filename: \"route\",\n        bundlePath: \"app/api/extract/route\"\n    },\n    resolvedPagePath: \"/Users/aldunchev/Work/ProjectsCode/AI/design-to-code/app/api/extract/route.ts\",\n    nextConfigOutput,\n    userland: _Users_aldunchev_Work_ProjectsCode_AI_design_to_code_app_api_extract_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/extract/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZleHRyYWN0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZleHRyYWN0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZXh0cmFjdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFsZHVuY2hldiUyRldvcmslMkZQcm9qZWN0c0NvZGUlMkZBSSUyRmRlc2lnbi10by1jb2RlJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmFsZHVuY2hldiUyRldvcmslMkZQcm9qZWN0c0NvZGUlMkZBSSUyRmRlc2lnbi10by1jb2RlJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM2QjtBQUMxRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpZ21hLWRlc2lnbi1leHRyYWN0b3IvPzUyZjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2FsZHVuY2hldi9Xb3JrL1Byb2plY3RzQ29kZS9BSS9kZXNpZ24tdG8tY29kZS9hcHAvYXBpL2V4dHJhY3Qvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2V4dHJhY3Qvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9leHRyYWN0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9leHRyYWN0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2FsZHVuY2hldi9Xb3JrL1Byb2plY3RzQ29kZS9BSS9kZXNpZ24tdG8tY29kZS9hcHAvYXBpL2V4dHJhY3Qvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2V4dHJhY3Qvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fextract%2Froute&page=%2Fapi%2Fextract%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fextract%2Froute.ts&appDir=%2FUsers%2Faldunchev%2FWork%2FProjectsCode%2FAI%2Fdesign-to-code%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Faldunchev%2FWork%2FProjectsCode%2FAI%2Fdesign-to-code&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/extract/route.ts":
/*!**********************************!*\
  !*** ./app/api/extract/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _src_services_extractor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/src/services/extractor */ \"(rsc)/./src/services/extractor.ts\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { fileKey } = body;\n        if (!fileKey) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"File key is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Initialize the extractor service\n        const extractor = new _src_services_extractor__WEBPACK_IMPORTED_MODULE_1__.ExtractorService();\n        // Extract data - using the new method that returns data\n        const result = await extractor.extractDataFromFigma(fileKey);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: result\n        });\n    } catch (error) {\n        console.error(\"Extraction error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to extract data from Figma\",\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2V4dHJhY3Qvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVEO0FBQ0k7QUFFcEQsZUFBZUUsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUUsSUFBSTtRQUMvQixNQUFNLEVBQUVDLE9BQU8sRUFBRSxHQUFHRjtRQUVwQixJQUFJLENBQUNFLFNBQVM7WUFDWixPQUFPTixxREFBWUEsQ0FBQ0ssSUFBSSxDQUN0QjtnQkFBRUUsT0FBTztZQUF1QixHQUNoQztnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsbUNBQW1DO1FBQ25DLE1BQU1DLFlBQVksSUFBSVIscUVBQWdCQTtRQUV0Qyx3REFBd0Q7UUFDeEQsTUFBTVMsU0FBUyxNQUFNRCxVQUFVRSxvQkFBb0IsQ0FBQ0w7UUFFcEQsT0FBT04scURBQVlBLENBQUNLLElBQUksQ0FBQztZQUN2Qk8sU0FBUztZQUNUQyxNQUFNSDtRQUNSO0lBRUYsRUFBRSxPQUFPSCxPQUFPO1FBQ2RPLFFBQVFQLEtBQUssQ0FBQyxxQkFBcUJBO1FBQ25DLE9BQU9QLHFEQUFZQSxDQUFDSyxJQUFJLENBQ3RCO1lBQ0VFLE9BQU87WUFDUFEsU0FBU1IsaUJBQWlCUyxRQUFRVCxNQUFNUSxPQUFPLEdBQUc7UUFDcEQsR0FDQTtZQUFFUCxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpZ21hLWRlc2lnbi1leHRyYWN0b3IvLi9hcHAvYXBpL2V4dHJhY3Qvcm91dGUudHM/Yjc2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5pbXBvcnQgeyBFeHRyYWN0b3JTZXJ2aWNlIH0gZnJvbSAnQC9zcmMvc2VydmljZXMvZXh0cmFjdG9yJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKVxuICAgIGNvbnN0IHsgZmlsZUtleSB9ID0gYm9keVxuXG4gICAgaWYgKCFmaWxlS2V5KSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdGaWxlIGtleSBpcyByZXF1aXJlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApXG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgZXh0cmFjdG9yIHNlcnZpY2VcbiAgICBjb25zdCBleHRyYWN0b3IgPSBuZXcgRXh0cmFjdG9yU2VydmljZSgpXG5cbiAgICAvLyBFeHRyYWN0IGRhdGEgLSB1c2luZyB0aGUgbmV3IG1ldGhvZCB0aGF0IHJldHVybnMgZGF0YVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGV4dHJhY3Rvci5leHRyYWN0RGF0YUZyb21GaWdtYShmaWxlS2V5KVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiByZXN1bHRcbiAgICB9KVxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXh0cmFjdGlvbiBlcnJvcjonLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7XG4gICAgICAgIGVycm9yOiAnRmFpbGVkIHRvIGV4dHJhY3QgZGF0YSBmcm9tIEZpZ21hJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJFeHRyYWN0b3JTZXJ2aWNlIiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsImZpbGVLZXkiLCJlcnJvciIsInN0YXR1cyIsImV4dHJhY3RvciIsInJlc3VsdCIsImV4dHJhY3REYXRhRnJvbUZpZ21hIiwic3VjY2VzcyIsImRhdGEiLCJjb25zb2xlIiwibWVzc2FnZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/extract/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/index.ts":
/*!*****************************!*\
  !*** ./src/config/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   validateConfig: () => (/* binding */ validateConfig)\n/* harmony export */ });\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ \"(rsc)/./node_modules/dotenv/lib/main.js\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_0__);\n\ndotenv__WEBPACK_IMPORTED_MODULE_0__.config();\nconst config = {\n    figmaApiToken: process.env.FIGMA_API_TOKEN || \"\",\n    figmaApiBaseUrl: \"https://api.figma.com/v1\"\n};\nfunction validateConfig() {\n    if (!config.figmaApiToken) {\n        throw new Error(\"FIGMA_API_TOKEN environment variable is required\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUM7QUFFakNBLDBDQUFhO0FBT04sTUFBTUMsU0FBaUI7SUFDNUJDLGVBQWVDLFFBQVFDLEdBQUcsQ0FBQ0MsZUFBZSxJQUFJO0lBQzlDQyxpQkFBaUI7QUFDbkIsRUFBRTtBQUVLLFNBQVNDO0lBQ2QsSUFBSSxDQUFDTixPQUFPQyxhQUFhLEVBQUU7UUFDekIsTUFBTSxJQUFJTSxNQUFNO0lBQ2xCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWdtYS1kZXNpZ24tZXh0cmFjdG9yLy4vc3JjL2NvbmZpZy9pbmRleC50cz9kYTkwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGRvdGVudiBmcm9tICdkb3RlbnYnO1xuXG5kb3RlbnYuY29uZmlnKCk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnIHtcbiAgZmlnbWFBcGlUb2tlbjogc3RyaW5nO1xuICBmaWdtYUFwaUJhc2VVcmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGNvbmZpZzogQ29uZmlnID0ge1xuICBmaWdtYUFwaVRva2VuOiBwcm9jZXNzLmVudi5GSUdNQV9BUElfVE9LRU4gfHwgJycsXG4gIGZpZ21hQXBpQmFzZVVybDogJ2h0dHBzOi8vYXBpLmZpZ21hLmNvbS92MSdcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbmZpZygpOiB2b2lkIHtcbiAgaWYgKCFjb25maWcuZmlnbWFBcGlUb2tlbikge1xuICAgIHRocm93IG5ldyBFcnJvcignRklHTUFfQVBJX1RPS0VOIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHJlcXVpcmVkJyk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJkb3RlbnYiLCJjb25maWciLCJmaWdtYUFwaVRva2VuIiwicHJvY2VzcyIsImVudiIsIkZJR01BX0FQSV9UT0tFTiIsImZpZ21hQXBpQmFzZVVybCIsInZhbGlkYXRlQ29uZmlnIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/config/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/processors/componentParser.ts":
/*!*******************************************!*\
  !*** ./src/processors/componentParser.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComponentParser: () => (/* binding */ ComponentParser)\n/* harmony export */ });\nclass ComponentParser {\n    parseComponents(fileData, componentsData) {\n        const components = this.extractComponents(fileData, componentsData);\n        return {\n            components,\n            version: fileData.version,\n            lastModified: fileData.lastModified\n        };\n    }\n    extractComponents(fileData, componentsData) {\n        const extractedComponents = [];\n        // PRIMARY: Extract components from file data (local components)\n        if (fileData.components && typeof fileData.components === \"object\") {\n            const componentKeys = Object.keys(fileData.components);\n            console.log(`🔧 Extracting ${componentKeys.length} components from file data...`);\n            for (const componentId of componentKeys){\n                const component = fileData.components[componentId];\n                const componentSpec = this.analyzeComponentFromFileData(componentId, component, fileData);\n                if (componentSpec) {\n                    extractedComponents.push(componentSpec);\n                }\n            }\n        }\n        // Extract component sets (variants) from file data\n        if (fileData.componentSets && typeof fileData.componentSets === \"object\") {\n            const componentSetKeys = Object.keys(fileData.componentSets);\n            console.log(`📚 Extracting ${componentSetKeys.length} component sets with variants...`);\n            for (const componentSetId of componentSetKeys){\n                const componentSet = fileData.componentSets[componentSetId];\n                const componentSetSpec = this.analyzeComponentSetFromFileData(componentSetId, componentSet, fileData);\n                if (componentSetSpec) {\n                    extractedComponents.push(componentSetSpec);\n                }\n            }\n        }\n        // SECONDARY: Extract components from published API data if available\n        if (componentsData.meta.components && componentsData.meta.components.length > 0) {\n            console.log(`📦 Adding ${componentsData.meta.components.length} published components from API...`);\n            for (const component of componentsData.meta.components){\n                extractedComponents.push({\n                    id: component.key,\n                    name: component.name,\n                    type: \"published-component\",\n                    properties: {\n                        nodeId: component.node_id,\n                        fileKey: component.file_key,\n                        thumbnailUrl: component.thumbnail_url,\n                        createdAt: component.created_at,\n                        updatedAt: component.updated_at\n                    },\n                    description: component.description || `Published component: ${component.name}`\n                });\n            }\n        }\n        // TERTIARY: Extract components from document tree if needed\n        if (extractedComponents.length === 0 && fileData.document) {\n            console.log(`🔍 Searching document tree for components...`);\n            const documentComponents = this.extractComponentsFromDocument(fileData.document);\n            extractedComponents.push(...documentComponents);\n        }\n        // FALLBACK: Sample data only if absolutely no components found\n        if (extractedComponents.length === 0) {\n            console.log(`⚠️  No components found, using sample data...`);\n            extractedComponents.push(...this.getFallbackComponents());\n        }\n        console.log(`✅ Successfully extracted ${extractedComponents.length} total components`);\n        return extractedComponents;\n    }\n    extractComponentsFromDocument(document) {\n        const components = [];\n        // Recursively search for components in the document tree\n        const searchForComponents = (node)=>{\n            if (node.type === \"COMPONENT\" || node.type === \"COMPONENT_SET\") {\n                components.push({\n                    id: node.id,\n                    name: node.name,\n                    type: node.type.toLowerCase(),\n                    properties: {\n                        nodeType: node.type,\n                        visible: node.visible !== false,\n                        absoluteBoundingBox: node.absoluteBoundingBox\n                    },\n                    description: `Component extracted from file: ${node.name}`\n                });\n            }\n            // Recursively search children\n            if (node.children && Array.isArray(node.children)) {\n                for (const child of node.children){\n                    searchForComponents(child);\n                }\n            }\n        };\n        searchForComponents(document);\n        return components;\n    }\n    analyzeComponentFromFileData(componentId, component, fileData) {\n        try {\n            console.log(`🔍 Analyzing component: ${component.name || componentId}`);\n            // Find the actual component node in the document tree\n            const componentNode = this.findComponentNodeInDocument(componentId, fileData.document);\n            let properties = {};\n            if (componentNode) {\n                // Extract properties from the actual node in the document\n                properties = this.extractPropertiesFromComponent(componentNode, fileData);\n                console.log(`✓ Found component node for ${component.name}, extracted ${Object.keys(properties).length} properties`);\n            } else {\n                // Fallback to basic metadata\n                properties = {\n                    componentKey: component.key,\n                    remote: component.remote,\n                    documentationLinks: component.documentationLinks || []\n                };\n                console.log(`⚠️  Component node not found for ${component.name}, using metadata only`);\n            }\n            return {\n                id: componentId,\n                name: component.name || `Component ${componentId}`,\n                type: \"component\",\n                properties,\n                description: component.description || `Local component: ${component.name || componentId}`\n            };\n        } catch (error) {\n            console.log(`⚠️  Error analyzing component ${componentId}:`, error);\n            return null;\n        }\n    }\n    analyzeComponentSetFromFileData(componentSetId, componentSet, fileData) {\n        try {\n            console.log(`🔍 Analyzing component set: ${componentSet.name || componentSetId}`);\n            // Find the actual component set node in the document tree\n            const componentSetNode = this.findComponentNodeInDocument(componentSetId, fileData.document);\n            let properties = {};\n            let variants = {};\n            if (componentSetNode) {\n                // Extract properties from the actual node in the document\n                properties = this.extractPropertiesFromComponent(componentSetNode, fileData);\n                variants = this.extractVariantsFromComponentSet(componentSetNode, fileData);\n                console.log(`✓ Found component set node for ${componentSet.name}, extracted ${Object.keys(properties).length} properties and ${Object.keys(variants).length} variants`);\n            } else {\n                // Fallback to basic metadata\n                properties = {\n                    componentKey: componentSet.key,\n                    remote: componentSet.remote,\n                    documentationLinks: componentSet.documentationLinks || []\n                };\n                console.log(`⚠️  Component set node not found for ${componentSet.name}, using metadata only`);\n            }\n            return {\n                id: componentSetId,\n                name: componentSet.name || `ComponentSet ${componentSetId}`,\n                type: \"component-set\",\n                properties,\n                variants,\n                description: componentSet.description || `Component set with variants: ${componentSet.name || componentSetId}`\n            };\n        } catch (error) {\n            console.log(`⚠️  Error analyzing component set ${componentSetId}:`, error);\n            return null;\n        }\n    }\n    extractPropertiesFromComponent(component, fileData) {\n        const properties = {};\n        // Basic component metadata\n        if (component.type) properties.nodeType = component.type;\n        if (component.visible !== undefined) properties.visible = component.visible;\n        if (component.absoluteBoundingBox) {\n            properties.width = component.absoluteBoundingBox.width;\n            properties.height = component.absoluteBoundingBox.height;\n        }\n        // Layout properties\n        if (component.layoutMode) properties.layoutMode = component.layoutMode;\n        if (component.primaryAxisSizingMode) properties.primaryAxisSizingMode = component.primaryAxisSizingMode;\n        if (component.counterAxisSizingMode) properties.counterAxisSizingMode = component.counterAxisSizingMode;\n        if (component.itemSpacing !== undefined) properties.itemSpacing = component.itemSpacing;\n        // Padding\n        if (component.paddingLeft !== undefined) properties.paddingLeft = component.paddingLeft;\n        if (component.paddingRight !== undefined) properties.paddingRight = component.paddingRight;\n        if (component.paddingTop !== undefined) properties.paddingTop = component.paddingTop;\n        if (component.paddingBottom !== undefined) properties.paddingBottom = component.paddingBottom;\n        // Border radius\n        if (component.cornerRadius !== undefined) properties.cornerRadius = component.cornerRadius;\n        if (component.rectangleCornerRadii) properties.cornerRadii = component.rectangleCornerRadii;\n        // Fill and stroke\n        if (component.fills && component.fills.length > 0) {\n            properties.fills = component.fills.map((fill)=>({\n                    type: fill.type,\n                    color: fill.color ? this.rgbToHex(fill.color) : undefined,\n                    opacity: fill.opacity\n                }));\n        }\n        if (component.strokes && component.strokes.length > 0) {\n            properties.strokes = component.strokes.map((stroke)=>({\n                    type: stroke.type,\n                    color: stroke.color ? this.rgbToHex(stroke.color) : undefined,\n                    opacity: stroke.opacity\n                }));\n        }\n        if (component.strokeWeight !== undefined) properties.strokeWeight = component.strokeWeight;\n        // Effects\n        if (component.effects && component.effects.length > 0) {\n            properties.effects = component.effects.map((effect)=>({\n                    type: effect.type,\n                    visible: effect.visible,\n                    radius: effect.radius,\n                    color: effect.color ? this.rgbaToString(effect.color) : undefined,\n                    offset: effect.offset\n                }));\n        }\n        // Text properties (if it's a text component)\n        if (component.style) {\n            properties.textStyle = {\n                fontFamily: component.style.fontFamily,\n                fontSize: component.style.fontSize,\n                fontWeight: component.style.fontWeight,\n                lineHeight: component.style.lineHeightPx || component.style.lineHeightPercent,\n                letterSpacing: component.style.letterSpacing,\n                textCase: component.style.textCase\n            };\n        }\n        return properties;\n    }\n    extractVariantsFromComponentSet(componentSet, fileData) {\n        const variants = {};\n        // Extract variant properties from component set\n        if (componentSet.componentPropertyDefinitions) {\n            Object.entries(componentSet.componentPropertyDefinitions).forEach(([propName, propDef])=>{\n                variants[propName] = {\n                    type: propDef.type,\n                    defaultValue: propDef.defaultValue,\n                    variantOptions: propDef.variantOptions || []\n                };\n            });\n        }\n        return variants;\n    }\n    rgbToHex(color) {\n        const toHex = (c)=>{\n            const hex = Math.round(c * 255).toString(16);\n            return hex.length === 1 ? \"0\" + hex : hex;\n        };\n        return `#${toHex(color.r)}${toHex(color.g)}${toHex(color.b)}`.toUpperCase();\n    }\n    rgbaToString(color) {\n        const r = Math.round(color.r * 255);\n        const g = Math.round(color.g * 255);\n        const b = Math.round(color.b * 255);\n        const a = color.a !== undefined ? color.a : 1;\n        return `rgba(${r}, ${g}, ${b}, ${a})`;\n    }\n    getFallbackComponents() {\n        return [\n            {\n                id: \"button-component\",\n                name: \"Button\",\n                type: \"component\",\n                properties: {\n                    variant: [\n                        \"primary\",\n                        \"secondary\",\n                        \"outline\"\n                    ],\n                    size: [\n                        \"sm\",\n                        \"md\",\n                        \"lg\"\n                    ],\n                    disabled: \"boolean\",\n                    text: \"string\"\n                },\n                description: \"Primary button component with multiple variants\"\n            },\n            {\n                id: \"input-component\",\n                name: \"Input\",\n                type: \"component\",\n                properties: {\n                    type: [\n                        \"text\",\n                        \"email\",\n                        \"password\"\n                    ],\n                    placeholder: \"string\",\n                    disabled: \"boolean\",\n                    required: \"boolean\"\n                },\n                description: \"Input field component\"\n            },\n            {\n                id: \"card-component\",\n                name: \"Card\",\n                type: \"component\",\n                properties: {\n                    elevation: [\n                        \"none\",\n                        \"sm\",\n                        \"md\",\n                        \"lg\"\n                    ],\n                    padding: [\n                        \"sm\",\n                        \"md\",\n                        \"lg\"\n                    ],\n                    rounded: \"boolean\"\n                },\n                description: \"Card container component\"\n            }\n        ];\n    }\n    findComponentNodeInDocument(componentId, document) {\n        // Recursively search for a node with the matching ID\n        const searchForNode = (node)=>{\n            if (node.id === componentId) {\n                return node;\n            }\n            if (node.children && Array.isArray(node.children)) {\n                for (const child of node.children){\n                    const found = searchForNode(child);\n                    if (found) return found;\n                }\n            }\n            return null;\n        };\n        return searchForNode(document);\n    }\n    analyzeComponentNode(node) {\n        // This method is kept for document tree analysis if needed\n        return null;\n    }\n    extractVariants(node) {\n        // This method is kept for backward compatibility\n        return {};\n    }\n    extractProperties(node) {\n        // This method is kept for backward compatibility\n        return {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/processors/componentParser.ts\n");

/***/ }),

/***/ "(rsc)/./src/processors/tokenParser.ts":
/*!***************************************!*\
  !*** ./src/processors/tokenParser.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenParser: () => (/* binding */ TokenParser)\n/* harmony export */ });\nclass TokenParser {\n    parseTokens(fileData, stylesData, variablesData) {\n        console.log(\"\\uD83C\\uDFA8 Extracting design tokens from published styles and variables...\");\n        const tokens = {\n            color: this.extractColorsFromVariables(variablesData, fileData, stylesData),\n            typography: this.extractTypographyFromVariables(variablesData, fileData, stylesData),\n            spacing: this.extractSpacingFromVariables(variablesData),\n            effects: this.extractEffectsFromStyles(fileData, stylesData),\n            borderRadius: this.extractBorderRadiusFromVariables(variablesData),\n            strokeWeight: this.extractStrokeWeightsFromVariables(variablesData)\n        };\n        console.log(\"✅ Design system extraction complete\");\n        return tokens;\n    }\n    extractColorsFromStyles(fileData, stylesData) {\n        const colors = {};\n        // Extract colors from published fill styles (primary source of truth)\n        const fillStyles = stylesData.meta.styles.filter((style)=>style.style_type === \"FILL\");\n        if (fillStyles.length > 0) {\n            console.log(`🎨 Found ${fillStyles.length} published color styles`);\n            for (const style of fillStyles){\n                const hierarchicalName = this.preserveDesignHierarchy(style.name);\n                const colorValue = this.extractColorFromStyle(style, fileData);\n                if (colorValue) {\n                    colors[hierarchicalName] = colorValue;\n                }\n            }\n        }\n        // Extract colors from Variables (if available in file)\n        // This is handled by the main extractColorsFromVariables method now\n        // const variableColors = this.extractColorsFromVariables(fileData);\n        // Object.assign(colors, variableColors);\n        console.log(`📊 Extracted ${Object.keys(colors).length} color tokens from design system`);\n        return Object.keys(colors).length > 0 ? colors : this.getFallbackColors();\n    }\n    extractColorsFromVariables(variablesData, fileData, stylesData) {\n        const colors = {};\n        // Extract colors from Variables API (primary source of truth)\n        if (variablesData.meta.variables) {\n            console.log(`🎨 Processing ${Object.keys(variablesData.meta.variables).length} variables for colors...`);\n            Object.entries(variablesData.meta.variables).forEach(([variableId, variable])=>{\n                if (variable.resolvedType === \"COLOR\") {\n                    const hierarchicalName = this.preserveDesignHierarchy(variable.name);\n                    const colorValue = this.extractColorFromVariable(variable, variablesData);\n                    if (colorValue) {\n                        colors[hierarchicalName] = colorValue;\n                        console.log(`✓ Found color variable: ${variable.name} = ${colorValue}`);\n                    }\n                }\n            });\n        }\n        // Fallback to published styles if no variables found\n        if (Object.keys(colors).length === 0) {\n            console.log(\"\\uD83D\\uDCCE No color variables found, falling back to published styles...\");\n            const fallbackColors = this.extractColorsFromStyles(fileData, stylesData);\n            return Object.keys(fallbackColors).length > 0 ? fallbackColors : this.getFallbackColors();\n        }\n        console.log(`📊 Extracted ${Object.keys(colors).length} color tokens from variables`);\n        return colors;\n    }\n    extractColorFromVariable(variable, variablesData) {\n        try {\n            // Get the default mode from the variable collection\n            const collection = variablesData.meta.variableCollections[variable.variableCollectionId];\n            if (!collection) return null;\n            const defaultModeId = collection.defaultModeId;\n            const colorValue = variable.valuesByMode[defaultModeId];\n            if (colorValue && typeof colorValue === \"object\") {\n                // Convert RGB values to hex\n                if (colorValue.r !== undefined && colorValue.g !== undefined && colorValue.b !== undefined) {\n                    return this.rgbToHex({\n                        r: colorValue.r,\n                        g: colorValue.g,\n                        b: colorValue.b\n                    });\n                }\n            }\n        } catch (error) {\n            console.log(`⚠️  Could not extract color from variable ${variable.name}`);\n        }\n        return null;\n    }\n    extractColorFromStyle(style, fileData) {\n        // Try to find the actual color value from the styles object in fileData\n        if (fileData.styles && fileData.styles[style.key]) {\n            const styleData = fileData.styles[style.key];\n            return this.extractColorValueFromStyleData(styleData);\n        }\n        // Fallback: try to infer from style name or return null\n        return null;\n    }\n    extractColorValueFromStyleData(styleData) {\n        try {\n            if (styleData.fills && styleData.fills.length > 0) {\n                const fill = styleData.fills[0];\n                if (fill.type === \"SOLID\" && fill.color) {\n                    return this.rgbToHex(fill.color);\n                }\n            }\n        } catch (error) {\n        // Silent fail for now\n        }\n        return null;\n    }\n    preserveDesignHierarchy(styleName) {\n        // Preserve the designer's hierarchical naming\n        return styleName.split(\"/\") // Handle \"Primary/Blue/500\" format\n        .map((part)=>part.trim()).map((part)=>this.sanitizeTokenName(part)).join(\"-\").toLowerCase();\n    }\n    traverseNodesForColors(node, colorCounts) {\n        if (!node) return;\n        // Extract fill colors\n        if (node.fills && Array.isArray(node.fills)) {\n            node.fills.forEach((fill)=>{\n                if (fill.type === \"SOLID\" && fill.color) {\n                    const hexColor = this.rgbToHex(fill.color);\n                    colorCounts[hexColor] = (colorCounts[hexColor] || 0) + 1;\n                }\n            });\n        }\n        // Extract stroke colors\n        if (node.strokes && Array.isArray(node.strokes)) {\n            node.strokes.forEach((stroke)=>{\n                if (stroke.type === \"SOLID\" && stroke.color) {\n                    const hexColor = this.rgbToHex(stroke.color);\n                    colorCounts[hexColor] = (colorCounts[hexColor] || 0) + 1;\n                }\n            });\n        }\n        // Recursively traverse children\n        if (node.children && Array.isArray(node.children)) {\n            node.children.forEach((child)=>{\n                this.traverseNodesForColors(child, colorCounts);\n            });\n        }\n    }\n    rgbToHex(color) {\n        const toHex = (c)=>{\n            const hex = Math.round(c * 255).toString(16);\n            return hex.length === 1 ? \"0\" + hex : hex;\n        };\n        return `#${toHex(color.r)}${toHex(color.g)}${toHex(color.b)}`.toUpperCase();\n    }\n    generateColorTokenName(color, index, count) {\n        // Try to generate semantic names based on color analysis\n        const colorAnalysis = this.analyzeColor(color);\n        if (colorAnalysis.name) {\n            return colorAnalysis.name;\n        }\n        return `color-${index + 1}`;\n    }\n    analyzeColor(hex) {\n        const color = hex.toLowerCase();\n        // Simple color categorization\n        if (color.includes(\"ff0000\") || color.includes(\"f00\") || color.startsWith(\"#e\") || color.startsWith(\"#d\")) {\n            return {\n                name: \"red\",\n                category: \"error\"\n            };\n        }\n        if (color.includes(\"00ff00\") || color.includes(\"0f0\") || color.includes(\"green\")) {\n            return {\n                name: \"green\",\n                category: \"success\"\n            };\n        }\n        if (color.includes(\"0000ff\") || color.includes(\"00f\") || color.includes(\"blue\")) {\n            return {\n                name: \"blue\",\n                category: \"primary\"\n            };\n        }\n        if (color.includes(\"ffffff\") || color === \"#fff\") {\n            return {\n                name: \"white\",\n                category: \"background\"\n            };\n        }\n        if (color.includes(\"000000\") || color === \"#000\") {\n            return {\n                name: \"black\",\n                category: \"text\"\n            };\n        }\n        return {\n            category: \"neutral\"\n        };\n    }\n    getFallbackColors() {\n        return {\n            primary: \"#007AFF\",\n            secondary: \"#5AC8FA\",\n            accent: \"#F43F5E\",\n            neutral: \"#8E8E93\"\n        };\n    }\n    extractTypographyFromStyles(fileData, stylesData) {\n        const typography = {};\n        // Extract typography from published text styles (primary source of truth)\n        const textStyles = stylesData.meta.styles.filter((style)=>style.style_type === \"TEXT\");\n        if (textStyles.length > 0) {\n            console.log(`📝 Found ${textStyles.length} published text styles`);\n            for (const style of textStyles){\n                const hierarchicalName = this.preserveDesignHierarchy(style.name);\n                const typographyProperties = this.extractTypographyFromStyle(style, fileData);\n                if (typographyProperties) {\n                    typography[hierarchicalName] = {\n                        ...typographyProperties,\n                        name: style.name,\n                        description: style.description || \"\"\n                    };\n                }\n            }\n        }\n        // Extract typography from Variables (if available)\n        // This is handled by the main extractTypographyFromVariables method now\n        // const variableTypography = this.extractTypographyFromVariables(fileData);\n        // Object.assign(typography, variableTypography);\n        console.log(`📊 Extracted ${Object.keys(typography).length} typography tokens from design system`);\n        return Object.keys(typography).length > 0 ? typography : this.getFallbackTypography();\n    }\n    extractTypographyFromVariables(variablesData, fileData, stylesData) {\n        const typography = {};\n        // Extract typography from Variables API (currently limited in Figma)\n        // Most typography variables are still handled via text styles\n        // Fallback to published text styles\n        console.log(\"\\uD83D\\uDCDD Typography variables not commonly available, using published text styles...\");\n        return this.extractTypographyFromStyles(fileData, stylesData);\n    }\n    extractTypographyFromStyle(style, fileData) {\n        // Try to find the actual typography properties from the styles object in fileData\n        if (fileData.styles && fileData.styles[style.key]) {\n            const styleData = fileData.styles[style.key];\n            return this.extractTypographyPropertiesFromStyleData(styleData);\n        }\n        return null;\n    }\n    extractTypographyPropertiesFromStyleData(styleData) {\n        try {\n            if (styleData.style) {\n                const textStyle = styleData.style;\n                return {\n                    fontSize: textStyle.fontSize || 16,\n                    fontWeight: textStyle.fontWeight || 400,\n                    lineHeight: textStyle.lineHeightPx ? textStyle.lineHeightPx / (textStyle.fontSize || 16) : textStyle.lineHeightPercent ? textStyle.lineHeightPercent / 100 : 1.4,\n                    fontFamily: textStyle.fontFamily || \"Inter\",\n                    letterSpacing: textStyle.letterSpacing || 0,\n                    textTransform: textStyle.textCase || \"none\"\n                };\n            }\n        } catch (error) {\n        // Silent fail for now\n        }\n        return null;\n    }\n    traverseNodesForTypography(node, textStyles) {\n        if (!node) return;\n        // Extract text properties from TEXT nodes\n        if (node.type === \"TEXT\" && node.style) {\n            const style = node.style;\n            const styleKey = this.generateTypographyKey(style);\n            if (!textStyles[styleKey]) {\n                textStyles[styleKey] = {\n                    fontSize: style.fontSize || 16,\n                    fontWeight: style.fontWeight || 400,\n                    lineHeight: style.lineHeightPx ? style.lineHeightPx / (style.fontSize || 16) : 1.4,\n                    fontFamily: style.fontFamily || \"Inter\",\n                    letterSpacing: style.letterSpacing || 0\n                };\n            }\n        }\n        // Recursively traverse children\n        if (node.children && Array.isArray(node.children)) {\n            node.children.forEach((child)=>{\n                this.traverseNodesForTypography(child, textStyles);\n            });\n        }\n    }\n    generateTypographyKey(style) {\n        const fontSize = style.fontSize || 16;\n        const fontWeight = style.fontWeight || 400;\n        // Generate semantic names based on size and weight\n        if (fontSize >= 32) return fontWeight >= 600 ? \"heading-xl\" : \"display-xl\";\n        if (fontSize >= 24) return fontWeight >= 600 ? \"heading-lg\" : \"display-lg\";\n        if (fontSize >= 20) return fontWeight >= 600 ? \"heading-md\" : \"display-md\";\n        if (fontSize >= 18) return fontWeight >= 600 ? \"heading-sm\" : \"text-lg\";\n        if (fontSize >= 16) return fontWeight >= 600 ? \"text-bold\" : \"text-base\";\n        if (fontSize >= 14) return \"text-sm\";\n        return \"text-xs\";\n    }\n    getFallbackTypography() {\n        return {\n            \"heading-xl\": {\n                fontSize: 32,\n                fontWeight: 700,\n                lineHeight: 1.2\n            },\n            \"heading-lg\": {\n                fontSize: 24,\n                fontWeight: 600,\n                lineHeight: 1.3\n            },\n            \"body\": {\n                fontSize: 16,\n                fontWeight: 400,\n                lineHeight: 1.5\n            }\n        };\n    }\n    extractSpacing(fileData) {\n        const spacing = {};\n        const spacingCounts = {};\n        // Extract spacing from Auto Layout nodes\n        this.traverseNodesForSpacing(fileData.document, spacingCounts);\n        // Convert to tokens with semantic names\n        Object.entries(spacingCounts).sort(([, a], [, b])=>b - a).slice(0, 15).forEach(([space, count], index)=>{\n            const tokenName = this.generateSpacingName(Number(space));\n            spacing[tokenName] = Number(space);\n        });\n        console.log(`📊 Found ${Object.keys(spacing).length} spacing tokens`);\n        return Object.keys(spacing).length > 0 ? spacing : this.getFallbackSpacing();\n    }\n    traverseNodesForSpacing(node, spacingCounts) {\n        if (!node) return;\n        // Extract Auto Layout spacing\n        if (node.layoutMode && node.itemSpacing && typeof node.itemSpacing === \"number\") {\n            spacingCounts[node.itemSpacing] = (spacingCounts[node.itemSpacing] || 0) + 1;\n        }\n        // Extract padding from Auto Layout\n        if (node.paddingLeft && typeof node.paddingLeft === \"number\") {\n            spacingCounts[node.paddingLeft] = (spacingCounts[node.paddingLeft] || 0) + 1;\n        }\n        if (node.paddingTop && typeof node.paddingTop === \"number\") {\n            spacingCounts[node.paddingTop] = (spacingCounts[node.paddingTop] || 0) + 1;\n        }\n        // Recursively traverse children\n        if (node.children && Array.isArray(node.children)) {\n            node.children.forEach((child)=>{\n                this.traverseNodesForSpacing(child, spacingCounts);\n            });\n        }\n    }\n    generateSpacingName(spacing) {\n        if (spacing === 0) return \"none\";\n        if (spacing <= 2) return \"xs\";\n        if (spacing <= 4) return \"sm\";\n        if (spacing <= 8) return \"md\";\n        if (spacing <= 12) return \"lg\";\n        if (spacing <= 16) return \"xl\";\n        if (spacing <= 24) return \"2xl\";\n        if (spacing <= 32) return \"3xl\";\n        if (spacing <= 48) return \"4xl\";\n        return \"5xl\";\n    }\n    getFallbackSpacing() {\n        return {\n            xs: 4,\n            sm: 8,\n            md: 16,\n            lg: 24,\n            xl: 32\n        };\n    }\n    extractEffectsFromStyles(fileData, stylesData) {\n        const effects = {};\n        // Extract effects from published effect styles (primary source of truth)\n        const effectStyles = stylesData.meta.styles.filter((style)=>style.style_type === \"EFFECT\");\n        if (effectStyles.length > 0) {\n            console.log(`✨ Found ${effectStyles.length} published effect styles`);\n            for (const style of effectStyles){\n                const hierarchicalName = this.preserveDesignHierarchy(style.name);\n                const effectProperties = this.extractEffectFromStyle(style, fileData);\n                if (effectProperties) {\n                    effects[hierarchicalName] = {\n                        ...effectProperties,\n                        name: style.name,\n                        description: style.description || \"\"\n                    };\n                }\n            }\n        }\n        // Extract effects from Variables (if available)\n        const variableEffects = this.extractEffectsFromVariables(fileData);\n        Object.assign(effects, variableEffects);\n        console.log(`📊 Extracted ${Object.keys(effects).length} effect tokens from design system`);\n        return Object.keys(effects).length > 0 ? effects : this.getFallbackEffects();\n    }\n    extractEffectsFromVariables(fileData) {\n        const effects = {};\n        // Check if file has effect variables\n        if (fileData.styles && typeof fileData.styles === \"object\") {\n            Object.entries(fileData.styles).forEach(([styleId, styleData])=>{\n                if (styleData.styleType === \"EFFECT\" && styleData.name) {\n                    const hierarchicalName = this.preserveDesignHierarchy(styleData.name);\n                    const effectProperties = this.extractEffectPropertiesFromStyleData(styleData);\n                    if (effectProperties) {\n                        effects[hierarchicalName] = effectProperties;\n                    }\n                }\n            });\n        }\n        return effects;\n    }\n    extractEffectFromStyle(style, fileData) {\n        // Try to find the actual effect properties from the styles object in fileData\n        if (fileData.styles && fileData.styles[style.key]) {\n            const styleData = fileData.styles[style.key];\n            return this.extractEffectPropertiesFromStyleData(styleData);\n        }\n        return null;\n    }\n    extractEffectPropertiesFromStyleData(styleData) {\n        try {\n            if (styleData.effects && styleData.effects.length > 0) {\n                const effect = styleData.effects[0]; // Take the first effect\n                if (effect.type === \"DROP_SHADOW\" || effect.type === \"INNER_SHADOW\") {\n                    return {\n                        type: effect.type.toLowerCase().replace(\"_\", \"\"),\n                        x: effect.offset?.x || 0,\n                        y: effect.offset?.y || 0,\n                        blur: effect.radius || 0,\n                        spread: effect.spread || 0,\n                        color: effect.color ? this.rgbaToString(effect.color) : \"rgba(0, 0, 0, 0.1)\"\n                    };\n                }\n            }\n        } catch (error) {\n        // Silent fail for now\n        }\n        return null;\n    }\n    traverseNodesForEffects(node, effectsFound) {\n        if (!node) return;\n        // Extract effects\n        if (node.effects && Array.isArray(node.effects)) {\n            node.effects.forEach((effect)=>{\n                if (effect.type === \"DROP_SHADOW\" || effect.type === \"INNER_SHADOW\") {\n                    effectsFound.push({\n                        type: effect.type.toLowerCase().replace(\"_\", \"\"),\n                        x: effect.offset?.x || 0,\n                        y: effect.offset?.y || 0,\n                        blur: effect.radius || 0,\n                        spread: effect.spread || 0,\n                        color: effect.color ? this.rgbaToString(effect.color) : \"rgba(0, 0, 0, 0.1)\"\n                    });\n                }\n            });\n        }\n        // Recursively traverse children\n        if (node.children && Array.isArray(node.children)) {\n            node.children.forEach((child)=>{\n                this.traverseNodesForEffects(child, effectsFound);\n            });\n        }\n    }\n    generateEffectName(effect, index) {\n        const blur = effect.blur || 0;\n        if (blur <= 2) return `shadow-xs`;\n        if (blur <= 4) return `shadow-sm`;\n        if (blur <= 8) return `shadow-md`;\n        if (blur <= 16) return `shadow-lg`;\n        return `shadow-xl`;\n    }\n    rgbaToString(color) {\n        const r = Math.round(color.r * 255);\n        const g = Math.round(color.g * 255);\n        const b = Math.round(color.b * 255);\n        const a = color.a !== undefined ? color.a : 1;\n        return `rgba(${r}, ${g}, ${b}, ${a})`;\n    }\n    getFallbackEffects() {\n        return {\n            \"shadow-sm\": {\n                type: \"dropShadow\",\n                x: 0,\n                y: 1,\n                blur: 3,\n                spread: 0,\n                color: \"rgba(0, 0, 0, 0.1)\"\n            },\n            \"shadow-lg\": {\n                type: \"dropShadow\",\n                x: 0,\n                y: 4,\n                blur: 6,\n                spread: -1,\n                color: \"rgba(0, 0, 0, 0.1)\"\n            }\n        };\n    }\n    extractBorderRadius(fileData) {\n        const borderRadius = {};\n        const radiusCounts = {};\n        // Extract border radius from document nodes\n        this.traverseNodesForBorderRadius(fileData.document, radiusCounts);\n        // Convert to tokens\n        Object.entries(radiusCounts).sort(([, a], [, b])=>b - a).slice(0, 10).forEach(([radius, count], index)=>{\n            const tokenName = this.generateBorderRadiusName(Number(radius));\n            borderRadius[tokenName] = Number(radius);\n        });\n        console.log(`📊 Found ${Object.keys(borderRadius).length} border radius tokens`);\n        return Object.keys(borderRadius).length > 0 ? borderRadius : this.getFallbackBorderRadius();\n    }\n    traverseNodesForBorderRadius(node, radiusCounts) {\n        if (!node) return;\n        // Extract corner radius from rectangles and other shapes\n        if (node.type === \"RECTANGLE\" || node.type === \"FRAME\") {\n            if (node.cornerRadius && typeof node.cornerRadius === \"number\") {\n                radiusCounts[node.cornerRadius] = (radiusCounts[node.cornerRadius] || 0) + 1;\n            }\n            // Handle individual corner radius\n            if (node.rectangleCornerRadii && Array.isArray(node.rectangleCornerRadii)) {\n                node.rectangleCornerRadii.forEach((radius)=>{\n                    if (typeof radius === \"number\") {\n                        radiusCounts[radius] = (radiusCounts[radius] || 0) + 1;\n                    }\n                });\n            }\n        }\n        // Recursively traverse children\n        if (node.children && Array.isArray(node.children)) {\n            node.children.forEach((child)=>{\n                this.traverseNodesForBorderRadius(child, radiusCounts);\n            });\n        }\n    }\n    generateBorderRadiusName(radius) {\n        if (radius === 0) return \"none\";\n        if (radius <= 2) return \"sm\";\n        if (radius <= 4) return \"md\";\n        if (radius <= 8) return \"lg\";\n        if (radius <= 12) return \"xl\";\n        if (radius <= 16) return \"2xl\";\n        if (radius >= 9999 || radius >= 1000) return \"full\";\n        return \"3xl\";\n    }\n    getFallbackBorderRadius() {\n        return {\n            none: 0,\n            sm: 2,\n            md: 4,\n            lg: 8,\n            xl: 12,\n            full: 9999\n        };\n    }\n    extractStrokeWeights(fileData) {\n        const strokeWeights = {};\n        const weightCounts = {};\n        // Extract stroke weights from document nodes\n        this.traverseNodesForStrokes(fileData.document, weightCounts);\n        // Convert to tokens\n        Object.entries(weightCounts).sort(([, a], [, b])=>b - a).slice(0, 10).forEach(([weight, count], index)=>{\n            const tokenName = this.generateStrokeWeightName(Number(weight));\n            strokeWeights[tokenName] = Number(weight);\n        });\n        console.log(`📊 Found ${Object.keys(strokeWeights).length} stroke weight tokens`);\n        return Object.keys(strokeWeights).length > 0 ? strokeWeights : this.getFallbackStrokeWeights();\n    }\n    traverseNodesForStrokes(node, weightCounts) {\n        if (!node) return;\n        // Extract stroke weights\n        if (node.strokeWeight && typeof node.strokeWeight === \"number\") {\n            weightCounts[node.strokeWeight] = (weightCounts[node.strokeWeight] || 0) + 1;\n        }\n        // Recursively traverse children\n        if (node.children && Array.isArray(node.children)) {\n            node.children.forEach((child)=>{\n                this.traverseNodesForStrokes(child, weightCounts);\n            });\n        }\n    }\n    generateStrokeWeightName(weight) {\n        if (weight <= 1) return \"thin\";\n        if (weight <= 2) return \"normal\";\n        if (weight <= 4) return \"medium\";\n        if (weight <= 6) return \"thick\";\n        return \"extra-thick\";\n    }\n    getFallbackStrokeWeights() {\n        return {\n            thin: 1,\n            normal: 2,\n            thick: 4\n        };\n    }\n    extractSpacingFromVariables(variablesData) {\n        const spacing = {};\n        // Extract spacing from Variables API\n        if (variablesData.meta.variables) {\n            Object.entries(variablesData.meta.variables).forEach(([variableId, variable])=>{\n                if (variable.resolvedType === \"FLOAT\" && variable.name.toLowerCase().includes(\"spacing\")) {\n                    const hierarchicalName = this.preserveDesignHierarchy(variable.name);\n                    const spacingValue = this.extractNumberFromVariable(variable, variablesData);\n                    if (spacingValue !== null) {\n                        spacing[hierarchicalName] = spacingValue;\n                    }\n                }\n            });\n        }\n        console.log(`📊 Extracted ${Object.keys(spacing).length} spacing tokens from variables`);\n        return Object.keys(spacing).length > 0 ? spacing : this.getFallbackSpacing();\n    }\n    extractBorderRadiusFromVariables(variablesData) {\n        const borderRadius = {};\n        // Extract border radius from Variables API\n        if (variablesData.meta.variables) {\n            Object.entries(variablesData.meta.variables).forEach(([variableId, variable])=>{\n                if (variable.resolvedType === \"FLOAT\" && (variable.name.toLowerCase().includes(\"radius\") || variable.name.toLowerCase().includes(\"border\"))) {\n                    const hierarchicalName = this.preserveDesignHierarchy(variable.name);\n                    const radiusValue = this.extractNumberFromVariable(variable, variablesData);\n                    if (radiusValue !== null) {\n                        borderRadius[hierarchicalName] = radiusValue;\n                    }\n                }\n            });\n        }\n        console.log(`📊 Extracted ${Object.keys(borderRadius).length} border radius tokens from variables`);\n        return Object.keys(borderRadius).length > 0 ? borderRadius : this.getFallbackBorderRadius();\n    }\n    extractStrokeWeightsFromVariables(variablesData) {\n        const strokeWeights = {};\n        // Extract stroke weights from Variables API\n        if (variablesData.meta.variables) {\n            Object.entries(variablesData.meta.variables).forEach(([variableId, variable])=>{\n                if (variable.resolvedType === \"FLOAT\" && (variable.name.toLowerCase().includes(\"stroke\") || variable.name.toLowerCase().includes(\"weight\"))) {\n                    const hierarchicalName = this.preserveDesignHierarchy(variable.name);\n                    const strokeValue = this.extractNumberFromVariable(variable, variablesData);\n                    if (strokeValue !== null) {\n                        strokeWeights[hierarchicalName] = strokeValue;\n                    }\n                }\n            });\n        }\n        console.log(`📊 Extracted ${Object.keys(strokeWeights).length} stroke weight tokens from variables`);\n        return Object.keys(strokeWeights).length > 0 ? strokeWeights : this.getFallbackStrokeWeights();\n    }\n    extractNumberFromVariable(variable, variablesData) {\n        try {\n            const collection = variablesData.meta.variableCollections[variable.variableCollectionId];\n            if (!collection) return null;\n            const defaultModeId = collection.defaultModeId;\n            const value = variable.valuesByMode[defaultModeId];\n            if (typeof value === \"number\") {\n                return value;\n            }\n        } catch (error) {\n            console.log(`⚠️  Could not extract number from variable ${variable.name}`);\n        }\n        return null;\n    }\n    // Utility methods\n    sanitizeTokenName(name) {\n        return name.toLowerCase().replace(/[^a-z0-9]/g, \"-\").replace(/-+/g, \"-\").replace(/^-|-$/g, \"\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/processors/tokenParser.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/extractor.ts":
/*!***********************************!*\
  !*** ./src/services/extractor.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtractorService: () => (/* binding */ ExtractorService)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _figma_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./figma-api */ \"(rsc)/./src/services/figma-api.ts\");\n/* harmony import */ var _processors_tokenParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../processors/tokenParser */ \"(rsc)/./src/processors/tokenParser.ts\");\n/* harmony import */ var _processors_componentParser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../processors/componentParser */ \"(rsc)/./src/processors/componentParser.ts\");\n\n\n\n\n\nclass ExtractorService {\n    constructor(){\n        this.figmaApi = new _figma_api__WEBPACK_IMPORTED_MODULE_2__.FigmaApiService();\n        this.tokenParser = new _processors_tokenParser__WEBPACK_IMPORTED_MODULE_3__.TokenParser();\n        this.componentParser = new _processors_componentParser__WEBPACK_IMPORTED_MODULE_4__.ComponentParser();\n    }\n    async extractFromFigma(fileKey, outputDir = \"./output\") {\n        try {\n            console.log(\"\\uD83D\\uDD04 Fetching Figma file data...\");\n            // Fetch data from Figma API\n            const [fileData, stylesData] = await Promise.all([\n                this.figmaApi.getFile(fileKey),\n                this.figmaApi.getFileStyles(fileKey)\n            ]);\n            // Try to fetch file-specific components, but make it optional (may fail with 404 for some files)\n            let componentsData;\n            try {\n                componentsData = await this.figmaApi.getFileComponents(fileKey);\n            } catch (error) {\n                console.log(\"⚠️  Could not fetch file components (using document components instead)\");\n                componentsData = {\n                    meta: {\n                        components: []\n                    }\n                };\n            }\n            // Try to fetch local variables\n            let variablesData;\n            try {\n                variablesData = await this.figmaApi.getLocalVariables(fileKey);\n                console.log(`🔧 Found ${Object.keys(variablesData.meta.variables || {}).length} local variables`);\n                console.log(`📚 Found ${Object.keys(variablesData.meta.variableCollections || {}).length} variable collections`);\n            } catch (error) {\n                console.log(\"⚠️  Could not fetch local variables (may not be available)\");\n                variablesData = {\n                    meta: {\n                        variables: {},\n                        variableCollections: {}\n                    }\n                };\n            }\n            console.log(\"✅ Successfully fetched Figma data\");\n            console.log(`📄 File: ${fileData.name}`);\n            console.log(`🎨 Styles found: ${stylesData.meta.styles.length}`);\n            console.log(`🧩 Components found: ${componentsData.meta.components.length}`);\n            // Debug: Let's see what data structure we have for variables\n            console.log(\"\\uD83D\\uDD0D Debugging file data structure...\");\n            console.log(\"Available top-level properties:\", Object.keys(fileData));\n            if (fileData.styles) {\n                console.log(\"\\uD83D\\uDCCB Styles object keys:\", Object.keys(fileData.styles));\n            }\n            // Check if there are any other properties that might contain variables\n            [\n                \"variables\",\n                \"localVariables\",\n                \"variableCollections\"\n            ].forEach((prop)=>{\n                if (fileData[prop]) {\n                    console.log(`🔧 Found ${prop}:`, typeof fileData[prop], Object.keys(fileData[prop] || {}));\n                }\n            });\n            // Debug components data in file\n            console.log(\"\\uD83E\\uDDE9 Debugging components in file data:\");\n            if (fileData.components && typeof fileData.components === \"object\") {\n                const componentKeys = Object.keys(fileData.components);\n                console.log(`📦 Found ${componentKeys.length} components in file data:`, componentKeys);\n                // Show first few components for debugging\n                componentKeys.slice(0, 3).forEach((key)=>{\n                    const comp = fileData.components[key];\n                    console.log(`  - Component ${key}:`, {\n                        name: comp.name,\n                        type: comp.type,\n                        description: comp.description || \"No description\"\n                    });\n                });\n            }\n            if (fileData.componentSets && typeof fileData.componentSets === \"object\") {\n                const componentSetKeys = Object.keys(fileData.componentSets);\n                console.log(`📚 Found ${componentSetKeys.length} component sets in file data:`, componentSetKeys);\n            }\n            // Parse design tokens\n            console.log(\"\\uD83D\\uDD04 Parsing design tokens...\");\n            const designTokens = this.tokenParser.parseTokens(fileData, stylesData, variablesData);\n            // Parse component specs\n            console.log(\"\\uD83D\\uDD04 Parsing component specifications...\");\n            const componentSpecs = this.componentParser.parseComponents(fileData, componentsData);\n            // Ensure output directory exists\n            await this.ensureDirectoryExists(outputDir);\n            // Write JSON files\n            await this.writeJsonFile(path__WEBPACK_IMPORTED_MODULE_1__.join(outputDir, \"design-tokens.json\"), designTokens);\n            await this.writeJsonFile(path__WEBPACK_IMPORTED_MODULE_1__.join(outputDir, \"component-specs.json\"), componentSpecs);\n            console.log(\"✅ Successfully generated files:\");\n            console.log(`  📁 ${path__WEBPACK_IMPORTED_MODULE_1__.join(outputDir, \"design-tokens.json\")}`);\n            console.log(`  📁 ${path__WEBPACK_IMPORTED_MODULE_1__.join(outputDir, \"component-specs.json\")}`);\n        } catch (error) {\n            console.error(\"❌ Error during extraction:\", error);\n            throw error;\n        }\n    }\n    async ensureDirectoryExists(dirPath) {\n        try {\n            await fs_promises__WEBPACK_IMPORTED_MODULE_0__.access(dirPath);\n        } catch  {\n            await fs_promises__WEBPACK_IMPORTED_MODULE_0__.mkdir(dirPath, {\n                recursive: true\n            });\n        }\n    }\n    async writeJsonFile(filePath, data) {\n        const jsonContent = JSON.stringify(data, null, 2);\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile(filePath, jsonContent, \"utf-8\");\n    }\n    // New method for web API - returns data instead of writing files\n    async extractDataFromFigma(fileKey) {\n        try {\n            console.log(\"\\uD83D\\uDD04 Fetching Figma file data...\");\n            // Fetch data from Figma API\n            const [fileData, stylesData] = await Promise.all([\n                this.figmaApi.getFile(fileKey),\n                this.figmaApi.getFileStyles(fileKey)\n            ]);\n            // Try to fetch file-specific components, but make it optional (may fail with 404 for some files)\n            let componentsData;\n            try {\n                componentsData = await this.figmaApi.getFileComponents(fileKey);\n            } catch (error) {\n                console.log(\"⚠️  Could not fetch file components (using document components instead)\");\n                componentsData = {\n                    meta: {\n                        components: []\n                    }\n                };\n            }\n            // Try to fetch local variables\n            let variablesData;\n            try {\n                variablesData = await this.figmaApi.getLocalVariables(fileKey);\n                console.log(`🔧 Found ${Object.keys(variablesData.meta.variables || {}).length} local variables`);\n                console.log(`📚 Found ${Object.keys(variablesData.meta.variableCollections || {}).length} variable collections`);\n            } catch (error) {\n                console.log(\"⚠️  Could not fetch local variables (may not be available)\");\n                variablesData = {\n                    meta: {\n                        variables: {},\n                        variableCollections: {}\n                    }\n                };\n            }\n            console.log(\"✅ Successfully fetched Figma data\");\n            console.log(`📄 File: ${fileData.name}`);\n            console.log(`🎨 Styles found: ${stylesData.meta.styles.length}`);\n            console.log(`🧩 Components found: ${componentsData.meta.components.length}`);\n            // Parse design tokens\n            console.log(\"\\uD83D\\uDD04 Parsing design tokens...\");\n            const designTokens = this.tokenParser.parseTokens(fileData, stylesData, variablesData);\n            // Parse component specs\n            console.log(\"\\uD83D\\uDD04 Parsing component specifications...\");\n            const componentSpecs = this.componentParser.parseComponents(fileData, componentsData);\n            console.log(\"✅ Successfully parsed data\");\n            return {\n                designTokens,\n                componentSpecs\n            };\n        } catch (error) {\n            console.error(\"❌ Error during extraction:\", error);\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/extractor.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/figma-api.ts":
/*!***********************************!*\
  !*** ./src/services/figma-api.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FigmaApiService: () => (/* binding */ FigmaApiService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \"(rsc)/./src/config/index.ts\");\n\n\nclass FigmaApiService {\n    constructor(){\n        this.client = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n            baseURL: _config__WEBPACK_IMPORTED_MODULE_0__.config.figmaApiBaseUrl,\n            headers: {\n                \"X-Figma-Token\": _config__WEBPACK_IMPORTED_MODULE_0__.config.figmaApiToken,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    }\n    async getFile(fileKey) {\n        try {\n            const response = await this.client.get(`/files/${fileKey}`);\n            return response.data;\n        } catch (error) {\n            throw new Error(`Failed to fetch Figma file: ${error}`);\n        }\n    }\n    async getFileStyles(fileKey) {\n        try {\n            const response = await this.client.get(`/files/${fileKey}/styles`);\n            return response.data;\n        } catch (error) {\n            throw new Error(`Failed to fetch Figma file styles: ${error}`);\n        }\n    }\n    async getFileComponents(fileKey) {\n        try {\n            const response = await this.client.get(`/files/${fileKey}/components`);\n            // Console log the response for debugging\n            console.log(\"\\uD83D\\uDD0D Raw components API response:\");\n            console.log(\"Response status:\", response.status);\n            console.log(\"Response data:\", JSON.stringify(response.data, null, 2));\n            if (response.data.meta && response.data.meta.components) {\n                console.log(`📦 Found ${response.data.meta.components.length} components via API`);\n                response.data.meta.components.forEach((comp, index)=>{\n                    console.log(`  ${index + 1}. ${comp.name} (${comp.key}) - Node ID: ${comp.node_id}`);\n                });\n            }\n            return response.data;\n        } catch (error) {\n            throw new Error(`Failed to fetch Figma file components: ${error}`);\n        }\n    }\n    async getLocalVariables(fileKey) {\n        try {\n            const response = await this.client.get(`/files/${fileKey}/variables/local`);\n            return response.data;\n        } catch (error) {\n            throw new Error(`Failed to fetch Figma local variables: ${error}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmljZXMvZmlnbWEtYXBpLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0RDtBQUN6QjtBQThFNUIsTUFBTUU7SUFHWEMsYUFBYztRQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHSiw2Q0FBS0EsQ0FBQ0ssTUFBTSxDQUFDO1lBQ3pCQyxTQUFTTCwyQ0FBTUEsQ0FBQ00sZUFBZTtZQUMvQkMsU0FBUztnQkFDUCxpQkFBaUJQLDJDQUFNQSxDQUFDUSxhQUFhO2dCQUNyQyxnQkFBZ0I7WUFDbEI7UUFDRjtJQUNGO0lBRUEsTUFBTUMsUUFBUUMsT0FBZSxFQUE4QjtRQUN6RCxJQUFJO1lBQ0YsTUFBTUMsV0FBNkMsTUFBTSxJQUFJLENBQUNSLE1BQU0sQ0FBQ1MsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFRixRQUFRLENBQUM7WUFDNUYsT0FBT0MsU0FBU0UsSUFBSTtRQUN0QixFQUFFLE9BQU9DLE9BQU87WUFDZCxNQUFNLElBQUlDLE1BQU0sQ0FBQyw0QkFBNEIsRUFBRUQsTUFBTSxDQUFDO1FBQ3hEO0lBQ0Y7SUFFQSxNQUFNRSxjQUFjTixPQUFlLEVBQWdDO1FBQ2pFLElBQUk7WUFDRixNQUFNQyxXQUErQyxNQUFNLElBQUksQ0FBQ1IsTUFBTSxDQUFDUyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUVGLFFBQVEsT0FBTyxDQUFDO1lBQ3JHLE9BQU9DLFNBQVNFLElBQUk7UUFDdEIsRUFBRSxPQUFPQyxPQUFPO1lBQ2QsTUFBTSxJQUFJQyxNQUFNLENBQUMsbUNBQW1DLEVBQUVELE1BQU0sQ0FBQztRQUMvRDtJQUNGO0lBRUEsTUFBTUcsa0JBQWtCUCxPQUFlLEVBQW9DO1FBQ3pFLElBQUk7WUFDRixNQUFNQyxXQUFtRCxNQUFNLElBQUksQ0FBQ1IsTUFBTSxDQUFDUyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUVGLFFBQVEsV0FBVyxDQUFDO1lBRTdHLHlDQUF5QztZQUN6Q1EsUUFBUUMsR0FBRyxDQUFDO1lBQ1pELFFBQVFDLEdBQUcsQ0FBQyxvQkFBb0JSLFNBQVNTLE1BQU07WUFDL0NGLFFBQVFDLEdBQUcsQ0FBQyxrQkFBa0JFLEtBQUtDLFNBQVMsQ0FBQ1gsU0FBU0UsSUFBSSxFQUFFLE1BQU07WUFFbEUsSUFBSUYsU0FBU0UsSUFBSSxDQUFDVSxJQUFJLElBQUlaLFNBQVNFLElBQUksQ0FBQ1UsSUFBSSxDQUFDQyxVQUFVLEVBQUU7Z0JBQ3ZETixRQUFRQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUVSLFNBQVNFLElBQUksQ0FBQ1UsSUFBSSxDQUFDQyxVQUFVLENBQUNDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztnQkFDakZkLFNBQVNFLElBQUksQ0FBQ1UsSUFBSSxDQUFDQyxVQUFVLENBQUNFLE9BQU8sQ0FBQyxDQUFDQyxNQUFNQztvQkFDM0NWLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRVMsUUFBUSxFQUFFLEVBQUUsRUFBRUQsS0FBS0UsSUFBSSxDQUFDLEVBQUUsRUFBRUYsS0FBS0csR0FBRyxDQUFDLGFBQWEsRUFBRUgsS0FBS0ksT0FBTyxDQUFDLENBQUM7Z0JBQ3JGO1lBQ0Y7WUFFQSxPQUFPcEIsU0FBU0UsSUFBSTtRQUN0QixFQUFFLE9BQU9DLE9BQU87WUFDZCxNQUFNLElBQUlDLE1BQU0sQ0FBQyx1Q0FBdUMsRUFBRUQsTUFBTSxDQUFDO1FBQ25FO0lBQ0Y7SUFFQSxNQUFNa0Isa0JBQWtCdEIsT0FBZSxFQUFtQztRQUN4RSxJQUFJO1lBQ0YsTUFBTUMsV0FBa0QsTUFBTSxJQUFJLENBQUNSLE1BQU0sQ0FBQ1MsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFRixRQUFRLGdCQUFnQixDQUFDO1lBQ2pILE9BQU9DLFNBQVNFLElBQUk7UUFDdEIsRUFBRSxPQUFPQyxPQUFPO1lBQ2QsTUFBTSxJQUFJQyxNQUFNLENBQUMsdUNBQXVDLEVBQUVELE1BQU0sQ0FBQztRQUNuRTtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWdtYS1kZXNpZ24tZXh0cmFjdG9yLy4vc3JjL3NlcnZpY2VzL2ZpZ21hLWFwaS50cz9mYjY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcywgeyBBeGlvc0luc3RhbmNlLCBBeGlvc1Jlc3BvbnNlIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWdtYUZpbGVSZXNwb25zZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgbGFzdE1vZGlmaWVkOiBzdHJpbmc7XG4gIHRodW1ibmFpbFVybDogc3RyaW5nO1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIGRvY3VtZW50OiBhbnk7XG4gIGNvbXBvbmVudHM6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gIGNvbXBvbmVudFNldHM6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gIHNjaGVtYVZlcnNpb246IG51bWJlcjtcbiAgc3R5bGVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZ21hU3R5bGVzUmVzcG9uc2Uge1xuICBtZXRhOiB7XG4gICAgc3R5bGVzOiBBcnJheTx7XG4gICAgICBrZXk6IHN0cmluZztcbiAgICAgIGZpbGVfa2V5OiBzdHJpbmc7XG4gICAgICBub2RlX2lkOiBzdHJpbmc7XG4gICAgICBzdHlsZV90eXBlOiBzdHJpbmc7XG4gICAgICB0aHVtYm5haWxfdXJsOiBzdHJpbmc7XG4gICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgY3JlYXRlZF9hdDogc3RyaW5nO1xuICAgICAgdXBkYXRlZF9hdDogc3RyaW5nO1xuICAgIH0+O1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZ21hQ29tcG9uZW50c1Jlc3BvbnNlIHtcbiAgbWV0YToge1xuICAgIGNvbXBvbmVudHM6IEFycmF5PHtcbiAgICAgIGtleTogc3RyaW5nO1xuICAgICAgZmlsZV9rZXk6IHN0cmluZztcbiAgICAgIG5vZGVfaWQ6IHN0cmluZztcbiAgICAgIHRodW1ibmFpbF91cmw6IHN0cmluZztcbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgICBjcmVhdGVkX2F0OiBzdHJpbmc7XG4gICAgICB1cGRhdGVkX2F0OiBzdHJpbmc7XG4gICAgfT47XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlnbWFWYXJpYWJsZXNSZXNwb25zZSB7XG4gIG1ldGE6IHtcbiAgICB2YXJpYWJsZXM6IHsgW2tleTogc3RyaW5nXTogRmlnbWFWYXJpYWJsZSB9O1xuICAgIHZhcmlhYmxlQ29sbGVjdGlvbnM6IHsgW2tleTogc3RyaW5nXTogRmlnbWFWYXJpYWJsZUNvbGxlY3Rpb24gfTtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWdtYVZhcmlhYmxlIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBrZXk6IHN0cmluZztcbiAgdmFyaWFibGVDb2xsZWN0aW9uSWQ6IHN0cmluZztcbiAgcmVzb2x2ZWRUeXBlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGhpZGRlbkZyb21QdWJsaXNoaW5nOiBib29sZWFuO1xuICBzY29wZXM6IHN0cmluZ1tdO1xuICBjb2RlU3ludGF4OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICB2YWx1ZXNCeU1vZGU6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlnbWFWYXJpYWJsZUNvbGxlY3Rpb24ge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGtleTogc3RyaW5nO1xuICBtb2RlczogQXJyYXk8e1xuICAgIG1vZGVJZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgfT47XG4gIGRlZmF1bHRNb2RlSWQ6IHN0cmluZztcbiAgcmVtb3RlOiBib29sZWFuO1xuICBoaWRkZW5Gcm9tUHVibGlzaGluZzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEZpZ21hQXBpU2VydmljZSB7XG4gIHByaXZhdGUgY2xpZW50OiBBeGlvc0luc3RhbmNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2xpZW50ID0gYXhpb3MuY3JlYXRlKHtcbiAgICAgIGJhc2VVUkw6IGNvbmZpZy5maWdtYUFwaUJhc2VVcmwsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdYLUZpZ21hLVRva2VuJzogY29uZmlnLmZpZ21hQXBpVG9rZW4sXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldEZpbGUoZmlsZUtleTogc3RyaW5nKTogUHJvbWlzZTxGaWdtYUZpbGVSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZTogQXhpb3NSZXNwb25zZTxGaWdtYUZpbGVSZXNwb25zZT4gPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoYC9maWxlcy8ke2ZpbGVLZXl9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggRmlnbWEgZmlsZTogJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRGaWxlU3R5bGVzKGZpbGVLZXk6IHN0cmluZyk6IFByb21pc2U8RmlnbWFTdHlsZXNSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZTogQXhpb3NSZXNwb25zZTxGaWdtYVN0eWxlc1Jlc3BvbnNlPiA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChgL2ZpbGVzLyR7ZmlsZUtleX0vc3R5bGVzYCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggRmlnbWEgZmlsZSBzdHlsZXM6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0RmlsZUNvbXBvbmVudHMoZmlsZUtleTogc3RyaW5nKTogUHJvbWlzZTxGaWdtYUNvbXBvbmVudHNSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZTogQXhpb3NSZXNwb25zZTxGaWdtYUNvbXBvbmVudHNSZXNwb25zZT4gPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoYC9maWxlcy8ke2ZpbGVLZXl9L2NvbXBvbmVudHNgKTtcblxuICAgICAgLy8gQ29uc29sZSBsb2cgdGhlIHJlc3BvbnNlIGZvciBkZWJ1Z2dpbmdcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFJhdyBjb21wb25lbnRzIEFQSSByZXNwb25zZTonKTtcbiAgICAgIGNvbnNvbGUubG9nKCdSZXNwb25zZSBzdGF0dXM6JywgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgIGNvbnNvbGUubG9nKCdSZXNwb25zZSBkYXRhOicsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEsIG51bGwsIDIpKTtcblxuICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWV0YSAmJiByZXNwb25zZS5kYXRhLm1ldGEuY29tcG9uZW50cykge1xuICAgICAgICBjb25zb2xlLmxvZyhg8J+TpiBGb3VuZCAke3Jlc3BvbnNlLmRhdGEubWV0YS5jb21wb25lbnRzLmxlbmd0aH0gY29tcG9uZW50cyB2aWEgQVBJYCk7XG4gICAgICAgIHJlc3BvbnNlLmRhdGEubWV0YS5jb21wb25lbnRzLmZvckVhY2goKGNvbXAsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coYCAgJHtpbmRleCArIDF9LiAke2NvbXAubmFtZX0gKCR7Y29tcC5rZXl9KSAtIE5vZGUgSUQ6ICR7Y29tcC5ub2RlX2lkfWApO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIEZpZ21hIGZpbGUgY29tcG9uZW50czogJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRMb2NhbFZhcmlhYmxlcyhmaWxlS2V5OiBzdHJpbmcpOiBQcm9taXNlPEZpZ21hVmFyaWFibGVzUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2U8RmlnbWFWYXJpYWJsZXNSZXNwb25zZT4gPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoYC9maWxlcy8ke2ZpbGVLZXl9L3ZhcmlhYmxlcy9sb2NhbGApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIEZpZ21hIGxvY2FsIHZhcmlhYmxlczogJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJheGlvcyIsImNvbmZpZyIsIkZpZ21hQXBpU2VydmljZSIsImNvbnN0cnVjdG9yIiwiY2xpZW50IiwiY3JlYXRlIiwiYmFzZVVSTCIsImZpZ21hQXBpQmFzZVVybCIsImhlYWRlcnMiLCJmaWdtYUFwaVRva2VuIiwiZ2V0RmlsZSIsImZpbGVLZXkiLCJyZXNwb25zZSIsImdldCIsImRhdGEiLCJlcnJvciIsIkVycm9yIiwiZ2V0RmlsZVN0eWxlcyIsImdldEZpbGVDb21wb25lbnRzIiwiY29uc29sZSIsImxvZyIsInN0YXR1cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRhIiwiY29tcG9uZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJjb21wIiwiaW5kZXgiLCJuYW1lIiwia2V5Iiwibm9kZV9pZCIsImdldExvY2FsVmFyaWFibGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/services/figma-api.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/axios","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/dotenv","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fextract%2Froute&page=%2Fapi%2Fextract%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fextract%2Froute.ts&appDir=%2FUsers%2Faldunchev%2FWork%2FProjectsCode%2FAI%2Fdesign-to-code%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Faldunchev%2FWork%2FProjectsCode%2FAI%2Fdesign-to-code&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();